#include <iostream>
#include "mylist"

#define COUT std::cout
#define ENDL std::endl

template <class T>
class myqueue
{
private:
    mylist<T> *begin, *now;
    int lenth;

public:
    myqueue()
    {
        begin = nullptr;
        now = nullptr;
        lenth = 0;
    }
    bool push(T elem)
    {
        if (0 == lenth)
        {
            try
            {
                begin = new mylist<T>(elem);
                now = begin;
            }
            catch (const std::bad_alloc &e)//防止没有内存
            {
                std::cerr << e.what() << " ->in myqueue.push" << '\n';
            }
            catch (...)
            {
                std::cerr << "Unkonw ERR in myqueue.push" << '\n';
            }
        }
        else
        {
            try
            {
                mylist<T> *tmp = new mylist<T>(elem);
                now->next = tmp;
                now = tmp;
            }
            catch (const std::bad_alloc &e)
            {
                std::cerr << e.what() << " ->in myqueue.push" << '\n';
            }
            catch (...)
            {
                std::cerr << "Unkonw ERR in myqueue.push" << '\n';
            }
        }
        lenth++;
        return true;
    }
    T pop()
    {
        if (0 == lenth)
        {
            begin = nullptr;
            return T(0);
        }
        mylist<T> *last = begin;
        T re = begin->obj;
        begin = begin->next;
        delete last;
        lenth--;
        if (0 == lenth)
        {
            begin = nullptr;
            now = nullptr;
        }
        return re;
    }
    void inqueue()
    {
        for (mylist<T> *i = begin; i != nullptr; i = i->next)
        {
            std::cout << i->obj;
        }
    }
    int len()
    {
        return lenth;
    }
    ~myqueue()
    {
        if (lenth > 0)
        {
            mylist<T> *last = begin;
            for (mylist<T> *i = begin->next; i != nullptr; i = i->next)
            {
                delete last;
                last = i;
            }
            delete last;
        }
    }
    myqueue(myqueue &&other) // 移动时复制指针
    {
        lenth = other.lenth;
        begin = other.begin;
        now = other.now;
        other.begin = nullptr; // 交换控制权，保持唯一性
        other.now = nullptr;
        other.lenth = 0;
    }
};